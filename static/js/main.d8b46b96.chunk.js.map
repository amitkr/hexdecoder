{"version":3,"sources":["components/HexInput.js","components/BarChart.js","components/HSLWheel.js","components/LightnessAndSaturation.js","App.js","components/Shorthand.js","serviceWorker.js","index.js"],"names":["Inputfelt","props","react_default","a","createElement","className","value","hex","spellCheck","type","onChange","event","input","target","slice","replace","setHsl","convert","hsl","setHex","BarChart","calculateBarValue","color","Math","floor","BarR","document","getElementById","BarG","BarB","r","this","rgb","g","b","style","setProperty","id","React","Component","HSLWheel","hue","needlestyle","transform","concat","setHue","h","console","log","onClick","LightnessAndSaturation","saturation","lightness","hslString","min","max","step","height","width","cx","cy","fill","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","shorthand","result","length","charAt","toUpperCase","getShorthand","HexInput","components_BarChart","components_HSLWheel","components_LightnessAndSaturation","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8b46b96.chunk.js","sourcesContent":["import React from 'react';\r\nimport './hexinputcss.css';\r\nimport convert from \"color-convert\";\r\n\r\nfunction Inputfelt(props) {\r\n\r\n    const onchange = event => {\r\n        const input = event.target.value.slice(0, 6).replace(/[^0-9A-Fa-f]+/, '')\r\n        props.setHsl(convert.hex.hsl(input));\r\n        props.setHex(input);\r\n    };\r\n    return (\r\n    <div className=\"Input__flex\">\r\n      <span className=\"Input__label\">#</span>\r\n      <input value={props.hex} spellCheck={false} type=\"text\" onChange={onchange} className=\"Input__field\"/>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Inputfelt;","import React from 'react';\r\nimport './barchart.css';\r\n\r\nclass BarChart extends React.Component {\r\n\r\n    calculateBarValue = (color) => {\r\n        const percent = Math.floor(color/255*100);\r\n        return 101 - percent;\r\n    };\r\n\r\n    render() {\r\n        const BarR = document.getElementById('Bar-r');\r\n        const BarG = document.getElementById('Bar-g');\r\n        const BarB = document.getElementById('Bar-b');\r\n\r\n        const r  = this.calculateBarValue(this.props.rgb[0]);\r\n        const g  = this.calculateBarValue(this.props.rgb[1]);\r\n        const b  = this.calculateBarValue(this.props.rgb[2]);\r\n\r\n        if(BarR) {\r\n            BarR.style.setProperty('grid-row-start', r)\r\n        }\r\n        if(BarG) {\r\n            BarG.style.setProperty('grid-row-start', g)\r\n        }\r\n        if(BarB) {\r\n            BarB.style.setProperty('grid-row-start', b)\r\n        }\r\n        return (\r\n            <div className=\"BarChart\">\r\n                <div id=\"Bar-r\"></div>\r\n                <div id=\"Bar-g\"></div>\r\n                <div id=\"Bar-b\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BarChart;","import React from 'react';\r\nimport './hslwheel.css';\r\nimport convert from 'color-convert';\r\n\r\n\r\nfunction HSLWheel(props) {\r\n  const hue = props.hsl[0];\r\n  const needlestyle = {\r\n    transform: `rotate(${hue - 90}deg) translateX(6em) `\r\n  };\r\n  const setHue = h => () => {\r\n      props.setHsl([h, props.hsl[1], props.hsl[2]]);\r\n      console.log(props.hsl, convert.hsl.hex(60,0, 0));\r\n      props.setHex(convert.hsl.hex(props.hsl[0], props.hsl[1], props.hsl[2]));\r\n  };\r\n  return (\r\n    <ul className=\"hslwheel\">\r\n      <div className=\"needle\" style={needlestyle}/>\r\n      <li className=\"red\" onClick={setHue(0)}><span>Red</span></li>\r\n      <li className=\"orange\" onClick={setHue(30)}><span>Orange</span></li>\r\n      <li className=\"yellow\" onClick={setHue(60)}><span>Yellow</span></li>\r\n      <li className=\"chartreuse\" onClick={setHue(90)}><span>Chartreuse</span></li>\r\n      <li className=\"green\" onClick={setHue(120)}><span>Green</span></li>\r\n      <li className=\"springgreen\" onClick={setHue(150)}><span>Spring Green</span></li>\r\n      <li className=\"cyan\" onClick={setHue(180)}><span>Cyan</span></li>\r\n      <li className=\"azure\" onClick={setHue(210)}><span>Azure</span></li>\r\n      <li className=\"blue\" onClick={setHue(240)}><span>Blue</span></li>\r\n      <li className=\"purple\" onClick={setHue(270)}><span>Purple</span></li>\r\n      <li className=\"magenta\" onClick={setHue(300)}><span>Magenta</span></li>\r\n      <li className=\"rose\" onClick={setHue(330)}><span>Rose</span></li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default HSLWheel;","import React from 'react';\r\nimport './lightnessAndSaturation.css';\r\nimport convert from 'color-convert';\r\n\r\n\r\nfunction LightnessAndSaturation(props) {\r\n    const hue = props.hsl[0];\r\n    const saturation = props.hsl[1];\r\n    const lightness = props.hsl[2];\r\n    let hslString = \"hsl(\"+ hue + \",\" + saturation + \"%,\" + lightness + \"%)\";\r\n\r\n    const onChangeLightness = event => {\r\n        props.setHsl([hue, saturation, event.target.value]);\r\n        const hex = convert.hsl.hex(hue, saturation, event.target.value);\r\n        props.setHex(hex);\r\n    };\r\n\r\n    const onChangeSaturation = event => {\r\n        const hex = convert.hsl.hex(hue, saturation, event.target.value);\r\n        props.setHex(hex);\r\n        props.setHsl([hue, event.target.value, lightness]);\r\n    };\r\n\r\n    const getLightnessText= () => {\r\n        if (lightness < 33.33 ){\r\n            return 'Dark';\r\n        } else if (lightness < 66.66 ){\r\n            return 'Middle';\r\n        }  else {\r\n            return 'Light';\r\n        }\r\n    };\r\n\r\n\r\n    const getSaturationText= () => {\r\n        if (saturation < 25 ){\r\n            return 'Grey';\r\n        } else if (saturation < 50 ){\r\n            return 'Muted';\r\n        }  else if (saturation < 75 ){\r\n            return 'Washed';\r\n        }  else {\r\n            return 'Saturated';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"LightnessAndSaturation\">\r\n            <span>Lightness: </span>\r\n            <input\r\n                type=\"range\"\r\n                min=\"0\" max=\"100\"\r\n                value={props.hsl[2]}\r\n                onChange={onChangeLightness}\r\n                step=\"1\"\r\n                className=\"slider\"/>\r\n            <svg height=\"100\" width=\"100\">\r\n                <circle cx=\"50\" cy=\"50\" r=\"30\" fill={hslString}/>\r\n            </svg>\r\n            <div>{getLightnessText()}</div>\r\n            <span>Saturation: </span>\r\n            <input\r\n                type=\"range\"\r\n                min=\"0\" max=\"100\"\r\n                value={props.hsl[1]}\r\n                onChange={onChangeSaturation}\r\n                step=\"1\"\r\n                className=\"slider\"/>\r\n            <svg height=\"100\" width=\"100\">\r\n                <circle cx=\"50\" cy=\"50\" r=\"30\" fill={hslString}/>\r\n            </svg>\r\n            <div>{getSaturationText()}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LightnessAndSaturation;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport HexInput from './components/HexInput';\r\nimport BarChart from './components/BarChart';\r\nimport convert from 'color-convert';\r\nimport HSLWheel from \"./components/HSLWheel\";\r\nimport LightnessAndSaturation from \"./components/LightnessAndSaturation\";\r\nimport getShorthand from \"./components/Shorthand\";\r\n\r\nfunction App() {\r\n    const [hsl, setHsl] = useState([0,0,0]);\r\n    const [hex, setHex] = useState('');\r\n    const rgb = convert.hsl.rgb(hsl);\r\n    const shorthand = getShorthand(hex);\r\n    return (\r\n        <div className=\"App\">\r\n            <HexInput hex={hex} setHex={setHex} setHsl={setHsl}/>\r\n            <div>\r\n                <p>hue: {hsl[0]} saturation: {hsl[1]} lightness: {hsl[2]}</p>\r\n                <p>shorthand: #{shorthand}</p>\r\n            </div>\r\n            <div className=\"oneline\">\r\n                <BarChart rgb={rgb}/>\r\n                <HSLWheel hsl={hsl} setHsl={setHsl} setHex={setHex}/>\r\n            </div>\r\n            <LightnessAndSaturation hsl={hsl} setHex={setHex}  setHsl={setHsl}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './lightnessAndSaturation.css';\r\n\r\nexport default function getShorthand(hex) {\r\n    let result = '';\r\n    if(hex && hex.length === 6) {\r\n        result = hex.charAt(0) + hex.charAt(2) + hex.charAt(4);\r\n        result = result.toUpperCase();\r\n    }\r\n    return (\r\n        result\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}